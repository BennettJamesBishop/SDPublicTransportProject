EMPLOYEE = read.csv('/Users/sophia/Downloads/data/Tinyclothes Database Files-20230309/EMPLOYEE.txt')
CUSTOMER = read.csv('/Users/sophia/Downloads/data/Tinyclothes Database Files-20230309/CUSTOMER.txt')
INVOICES = read.csv('/Users/sophia/Downloads/data/Tinyclothes Database Files-20230309/INVOICES.txt')
SALESORDER = read.csv('/Users/sophia/Downloads/data/Tinyclothes Database Files-20230309/SALES_ORDER.txt')
SALESORDERLINE = read.csv('/Users/sophia/Downloads/data/Tinyclothes Database Files-20230309/SALES_ORDER_LINE.txt')
PRODUCT = read.csv('/Users/sophia/Downloads/data/Tinyclothes Database Files-20230309/PRODUCT.txt')
dbWriteTable(db, 'EMPLOYEE', EMPLOYEE, overwrite= TRUE)
dbWriteTable(db, 'CUSTOMER', CUSTOMER, overwrite= TRUE)
dbWriteTable(db, 'INVOICES', INVOICES, overwrite= TRUE)
dbWriteTable(db, 'SALESORDER', SALESORDER, overwrite= TRUE)
dbWriteTable(db, 'SALESORDERLINE', SALESORDERLINE, overwrite= TRUE)
dbWriteTable(db, 'PRODUCT', PRODUCT, overwrite= TRUE)
View(PRODUCT)
View(CUSTOMER)
library(DBI)
library(RSQLite)
library(sqldf)
mydb = dbConnect(RSQLite::SQLite(), dbname = 'TinyClothesDB.sqlite')
EMPLOYEE = read.csv('/Users/sophia/Downloads/data/Tinyclothes Database Files-20230309/EMPLOYEE.txt')
CUSTOMER = read.csv('/Users/sophia/Downloads/data/Tinyclothes Database Files-20230309/CUSTOMER.txt')
DEPARTMENT = read.csv('/Users/sophia/Downloads/data/Tinyclothes Database Files-20230309/DEPARTMENT.txt')
EMPLOYEEPHONE = read.csv('/Users/sophia/Downloads/data/Tinyclothes Database Files-20230309/EMPLOYEE_PHONE.txt')
INVOICES = read.csv('/Users/sophia/Downloads/data/Tinyclothes Database Files-20230309/INVOICES.txt')
SALESORDER = read.csv('/Users/sophia/Downloads/data/Tinyclothes Database Files-20230309/SALES_ORDER.txt')
SALESORDERLINE = read.csv('/Users/sophia/Downloads/data/Tinyclothes Database Files-20230309/SALES_ORDER_LINE.txt')
SOFTTOYSDATA = read.csv('/Users/sophia/Downloads/data/Tinyclothes Database Files-20230309/SOFT_TOYS_DATA.txt')
STOCKTOTAL = read.csv('/Users/sophia/Downloads/data/Tinyclothes Database Files-20230309/STOCK_TOTAL.txt')
PRODUCT = read.csv('/Users/sophia/Downloads/data/Tinyclothes Database Files-20230309/PRODUCT.txt')
dbWriteTable(mydb, 'EMPLOYEE', EMPLOYEE)
dbWriteTable(mydb, 'CUSTOMER', CUSTOMER)
dbWriteTable(mydb, 'DEPARTMENT', DEPARTMENT)
dbWriteTable(mydb, 'EMPLOYEEPHONE', EMPLOYEEPHONE)
dbWriteTable(mydb, 'INVOICES', INVOICES)
dbWriteTable(mydb, 'SALESORDER', SALESORDER)
dbWriteTable(mydb, 'SOFTTOYSDATA', SOFTTOYSDATA)
dbWriteTable(mydb, 'STOCKTOTAL', STOCKTOTAL)
dbWriteTable(mydb, 'SALESORDERLINE', SALESORDERLINE)
dbWriteTable(db, 'PRODUCT', PRODUCT, overwrite= TRUE)
db = dbConnect(drv, "Chinook_sqlite.sqlite")
drv = dbDriver("SQLite")
db = dbConnect(drv, "/Users/sophia/Chinook_sqlite.sqlite")
dbListTables(db)
db = dbConnect(drv, "/Users/sophia/Downloads/data/Chinook_sqlite.sqlite")
dbListTables(db)
x
x
x <- seq(-4,4,length=200)
y <- dnorm(x,mean=0,sd=1)
z <- plot(x,yy,type="l",lwd=2,col="blue")
z <- plot(x,y,type="l",lwd=2,col="blue")
pnorm(77, 68, 9, lowertail=F)
pnorm(77, 68, 9, lowertail=False)
pnorm(77, 68, 9, lowertail=F)
pnorm(77, 68, 9, lower.tail=F)
target = 100000
product = 1
count = 0
count = count + 1
print(count)
target = 100000
product = 1
count = 0
while(product < target){
product = product * product +1
count = count + 1
}
print(count)
# Q2
target = 100000
num = 1
count = 0
while(num <= target){
count = count + 1
num = num * count
}
print(count)
target = 100000
product = 1
count = 0
while(product < target){
product = product * count
count = count + 1
}
dbGetQuery(mydb, 'select distinct name from employee')
dbGetQuery(mydb, 'select name from department like "S%r%"'
dbGetQuery(mydb, 'select name from department like "S%r%"')
dbGetQuery(mydb, 'select name from department like "S%r%"')
dbGetQuery(mydb, 'select name from department like"S%r%"')
dbGetQuery(mydb, 'select name from department like "S%r%"')
dbGetQuery(mydb, 'select name from department like "%p%"')
dbGetQuery(mydb, 'select name from department like "%p%"')
dbGetQuery(mydb, 'select name from department' like "%p%"')
dbGetQuery(mydb, 'select name from department')
dbGetQuery(mydb, 'select name from department like "S%"')
dbGetQuery(mydb, 'select name from department like "S_"'
dbGetQuery(mydb, 'select name from department like "S_"')
dbGetQuery(mydb, 'select name from products like socks where color = white')
dbGetQuery(mydb, 'select name from products like "sock" where color = white')
dbGetQuery(mydb, 'select name from product like "sock" where color = white')
View(PRODUCT)
dbGetQuery(mydb, 'select name from product where color = white')
dbGetQuery(mydb, 'select name from product where color like "white"')
dbGetQuery(mydb, 'select name from product where color like "white" and where name like "socks"')
dbGetQuery(mydb, 'select name from product where name like "socks"')
dbGetQuery(mydb, 'select name from product where color like "white" and where name like "socks"')
dbGetQuery(mydb, 'select name from product where color like "white" and  name like "socks"')
dbGetQuery(mydb, 'select name from product where color like "white" and  name like "socks"')
ifelse(c(4) % 2 == 0, 'pos', 'neg')
ifelse((c(4) % 2 == 0), 'pos', 'neg')
ifelse((c(4) % 2 = 0), 'pos', 'neg')
ifelse((c(4) %% 2 == 0), 'pos', 'neg')
ifelse((c(4, 5) %% 2 == 0), 'pos', 'neg')
ifelse((c(4, 5) %% 2 == 0), print('pos'), 'neg')
ifelse((c(4, 5) %% 2 == 0), print('pos'), print('neg')
ifelse((c(4, 5) %% 2 == 0), print('pos'), print('neg'))
ifelse((c(4, 5) %% 2 == 0), print('pos'), print('neg'))
ifelse((c(4, 5) %% 2 == 0), 'pos', print('neg'))
ifelse((c(4, 5) %% 2 == 0), 'pos', 'neg')
x = "hi there"
ifelse(is.character(x, x, 'here'))
ifelse(is.character(x), x, 'here')
ifelse(is.character(x), x, 'here')
x = c("hi there", 7)
ifelse(is.character(x), x, 'here')
x = c("hi there", 7)
ifelse(is.character(x), x, 'here')
x = c("hi there", 7)
# Q1
(A = A - 0.0 - 0.4 - 0.1- 0.03)
# Q1
(A = A - 0.0 - 0.4 - 0.1- 0.03)
prob = c(0, 0.47, 0.4, 0.1, 0.03)
0.4 + 0.03 + 0.1
# Q1
(A = A - 0.0 - 0.4 - 0.1- 0.03)
prob = c(0, 0.47, 0.4, 0.1, 0.03)
0.4 + 0.03 + 0.1
0.4 + 0.03 + 0.1 + 0.47
dbGetQuery(mydb, 'select name from employee where name like"%%t%%%")
dbGetQuery(mydb, 'select name from employee where name like"%%t%%%"')
dbGetQuery(mydb, 'select name from employee where name like"%%t%%%"')
dbGetQuery(mydb, 'pragma foreign_key_list(employee)'
dbGetQuery(mydb, 'pragma foreign_key_list(employee)')
dbGetQuery(mydb, 'pragma foreign_key_list(employee)')
dbGetQuery(mydb, 'pragma foreign_key_list(sales_order)')
dbGetQuery(db, 'pragma foreign_key_list(album)')
library(tidytransit)
library(gtfstools)
sdts = read_gtfs('/Users/sophia/Downloads/DSPROJECT/data/gtfs.zip')
stop_freq = get_stop_frequency(sdts, start_time = 06:00:00, end_time = 09:00:00)
(stop_freq = get_stop_frequency(sdts, start_time = 06:00:00, end_time = 09:00:00))
drv = dbDriver("SQLite")
db = dbConnect(drv, "/Users/sophia/Downloads/data/Chinook_sqlite.sqlite")
import tidytransit
package tidytransit
import.package(tidytransit)
library(tidytransit)
read_gtfs(/Users/sophia/Downloads/DSPROJECT/SDPublicTransportProject/data/gtfs.zip, files = NULL, quiet = TRUE, ...)
library(tidytransit)
library(gtfstools)
sdts = read_gtfs('/Users/sophia/Downloads/DSPROJECT/data/gtfs.zip')
sdts = read_gtfs('/Users/sophia/Downloads/DSPROJECT/SDPublicTransportProject/data/gtfs.zip')
stop_freq = get_stop_frequency(sdts, start_time = 06:00:00, end_time = 09:00:00)
stop_freq = get_stop_frequency(sdts, start_time = 06:00:00, end_time = 09:00:00)
install.packages("gtfstools")
install.packages("gtfstools")
library(gtfstools)
sdts = read_gtfs('/Users/sophia/Downlo
sdts = read_gtfs('/Users/sophia/Downloads/DSPROJECT/SDPublicTransportProject/data/gtfs.zip')
stop_freq = get_stop_frequency(sdts, start_time = 06:00:00, end_time = 09:00:00)
sdts = read_gtfs('/Users/sophia/Downloads/DSPROJECT/SDPublicTransportProject/data/gtfs.zip')
stop_freq = get_stop_frequency(sdts, start_time = 06:00:00, end_time = 09:00:00)
library(gtfstools)
sdts = read_gtfs('/Users/sophia/Downloads/DSPROJECT/SDPublicTransportProject/data/gtfs.zip')
stop_freq = get_stop_frequency(sdts, start_time = 06:00:00, end_time = 09:00:00)
stop_freq = frequencies_to_stop_times(sdts, start_time = 06:00:00, end_time = 09:00:00)
stop_freq = frequencies_to_stop_times(sdts)
install.packages("tidytransit")library(gtfstools)
install.packages("tidytransit")
library(tidytransit)
sdts = read_gtfs('/Users/sophia/Downloads/DSPROJECT/SDPublicTransportProject/data/gtfs.zip')
am_stop_freq <- get_stop_frequency(gtfs, start_time = 6*3600, end_time = 10*3600,
service_ids = service_ids, by_route = TRUE)
gtfs <- set_servicepattern(gtfs)
gtfs = read_gtfs('/Users/sophia/Downloads/DSPROJECT/SDPublicTransportProject/data/gtfs.zip')
gtfs <- set_servicepattern(gtfs)
gtfs <- set_servicepattern(gtfs)
am_stop_freq <- get_stop_frequency(gtfs, start_time = 6*3600, end_time = 10*3600)
library(tidytransit)
gtfs = read_gtfs('/Users/sophia/Downloads/DSPROJECT/SDPublicTransportProject/data/gtfs.zip')
am_stop_freq <- get_stop_frequency(gtfs, start_time = 6*3600, end_time = 10*3600)
gtfs = as_tidygtfs(gtfs)
am_stop_freq <- get_stop_frequency(gtfs, start_time = 6*3600, end_time = 10*3600)
?data.table
library(tidytransit)
gtfs = read_gtfs('/Users/sophia/Downloads/DSPROJECT/SDPublicTransportProject/data/gtfs.zip')
am_stop_freq <- get_stop_frequency(gtfs, start_time = 6*3600, end_time = 10*3600)
gtfs = as_tidygtfs(gtfs)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(dplyr)
library(tidytransit)
library(ggplot2)
library(sf)
options(dplyr.summarise.inform=F)
local_gtfs_path <- system.file("extdata", "google_transit_nyc_subway.zip", package = "tidytransit")
gtfs <- read_gtfs(local_gtfs_path)
# gtfs <- read_gtfs("http://web.mta.info/developers/data/nyct/subway/google_transit.zip")
gtfs <- set_servicepattern(gtfs)
gtfs <- gtfs_as_sf(gtfs)
gtfs$shapes$length <- st_length(gtfs$shapes)
shape_lengths <- gtfs$shapes %>%
as.data.frame() %>%
select(shape_id, length, -geometry)
service_pattern_summary <- gtfs$trips %>%
left_join(gtfs$.$servicepatterns, by="service_id") %>%
left_join(shape_lengths, by="shape_id") %>%
left_join(gtfs$stop_times, by="trip_id") %>%
group_by(servicepattern_id) %>%
summarise(
trips = n(),
routes = n_distinct(route_id),
total_distance_per_day_km = sum(as.numeric(length), na.rm=TRUE)/1e3,
route_avg_distance_km = (sum(as.numeric(length), na.rm=TRUE)/1e3)/(trips*routes),
stops=(n_distinct(stop_id)/2))
service_pattern_summary <- gtfs$.$dates_servicepatterns %>%
group_by(servicepattern_id) %>%
summarise(days_in_service = n()) %>%
left_join(service_pattern_summary, by="servicepattern_id")
knitr::kable(service_pattern_summary)
service_ids <- gtfs$.$servicepattern %>%
filter(servicepattern_id == 's_e25d6ca') %>%
pull(service_id)
head(service_ids) %>%
knitr::kable()
gtfs$trips %>%
filter(service_id %in% service_ids) %>%
group_by(service_id, route_id) %>%
summarise(count = n()) %>%
head() %>%
knitr::kable()
am_stop_freq <- get_stop_frequency(gtfs, start_time = 6*3600, end_time = 10*3600,
service_ids = service_ids, by_route = TRUE)
knitr::kable(head(am_stop_freq))
one_line_stops <- am_stop_freq %>%
filter(route_id == 1 & direction_id == 0) %>%
left_join(gtfs$stops, by ="stop_id") %>%
mutate(mean_headway_minutes = mean_headway/60)
one_line_stops %>%
arrange(desc(mean_headway)) %>%
select(stop_name, n_departures, mean_headway) %>%
head() %>%
knitr::kable()
one_line_stops %>%
arrange(desc(mean_headway)) %>%
select(stop_name, n_departures, mean_headway) %>%
tail() %>%
knitr::kable()
one_line_stops_sf <- gtfs$stops %>%
right_join(one_line_stops, by="stop_id")
one_line_stops_sf %>%
ggplot() +
geom_sf(aes(color = mean_headway_minutes)) +
theme_bw()
summary(one_line_stops$mean_headway)
am_route_freq <- get_route_frequency(gtfs, service_ids = service_ids,
start_time = 6*3600, end_time = 10*3600)
head(am_route_freq) %>%
knitr::kable()
# get_route_geometry needs a gtfs object that includes shapes as simple feature data frames
routes_sf <- get_route_geometry(gtfs, service_ids = service_ids)
routes_sf <- routes_sf %>%
inner_join(am_route_freq, by = 'route_id')
# convert to an appropriate coordinate reference system
routes_sf_crs <- sf::st_transform(routes_sf, 26919)
routes_sf_crs %>%
filter(median_headways < 10*60) %>%
ggplot() +
geom_sf(aes(colour=as.factor(median_headways))) +
labs(color = "Headways") +
geom_sf_text(aes(label=route_id)) +
theme_bw()
routes_sf_buffer <- st_buffer(routes_sf,
dist = routes_sf$total_departures/1e6)
routes_sf_buffer %>%
ggplot() +
geom_sf(colour = alpha("white", 0), fill = alpha("red",0.2)) +
theme_bw()
gtfs$stops %>%
inner_join(am_stop_freq, by = "stop_id") %>%
filter(n_departures > 50) %>%
select(stop_id, stop_name, n_departures, mean_headway) %>%
arrange(n_departures) %>%
head() %>%
knitr::kable()
am_stop_name_departures <- left_join(gtfs$stops, am_stop_freq, by="stop_id")
am_stop_name_departures <- am_stop_name_departures %>%
group_by(stop_name) %>%
transmute(total_departures = sum(n_departures, na.rm=TRUE))
am_stop_name_departures <- am_stop_name_departures %>%
filter(total_departures > 100)
ggplot() +
geom_sf(data = routes_sf_buffer,
colour = alpha("white",0), fill = alpha("red",0.3)) +
geom_sf(data = am_stop_name_departures,
aes(size = total_departures), shape=1) +
labs(size = "Departures (Hundreds)") +
theme_bw() +
theme(legend.position="none") +
ggtitle("NYC MTA - Relative Departures by Route and Stop (AM)")
library(tidytransit)
gtfs = read_gtfs('/Users/sophia/Downloads/DSPROJECT/SDPublicTransportProject/data/gtfs.zip')
# gtfs = as_tidygtfs(gtfs)
# am_stop_freq <- get_stop_frequency(gtfs, start_time = 6*3600, end_time = 10*3600)
am_route_freq <- get_route_frequency(gtfs, service_ids = service_ids,
start_time = 6*3600, end_time = 10*3600)
library(tidytransit)
gtfs = read_gtfs('/Users/sophia/Downloads/DSPROJECT/SDPublicTransportProject/data/gtfs.zip')
am_route_freq <- get_route_frequency(gtfs, service_ids = service_ids,
start_time = 6*3600, end_time = 10*3600)
library(tidytransit)
local_gtfs_path <- system.file("extdata", "google_transit_nyc_subway.zip", package = "tidytransit")
gtfs <- read_gtfs(local_gtfs_path)
am_route_freq <- get_route_frequency(gtfs, service_ids = service_ids,
start_time = 6*3600, end_time = 10*3600)
head(am_route_freq) %>%
knitr::kable()
library(tidytransit)
gtfs = read_gtfs('/Users/sophia/Downloads/DSPROJECT/SDPublicTransportProject/data/gtfs_data_test.zip')
am_route_freq <- get_route_frequency(gtfs, service_ids = service_ids,
start_time = 6*3600, end_time = 10*3600)
am_route_freq <- get_route_frequency(gtfs, service_ids = service_ids)
head(am_route_freq) %>%
knitr::kable()
am_route_freq <- get_route_frequency(gtfs, service_ids = service_ids)
library(DBI)
library(sqldf)
library(RSQLite)
setwd('/Users/sophia/Downloads/DSPROJECT/chroma')
setwd('/Users/sophia/Downloads/DSPROJECT/SDPublicTransportProject/data')
drv = dbDriver('SQLite')
db = dbConnect(drv, dbname = 'gtfsdatabase.sqlite')
routes = read.csv('/Users/sophia/Downloads/DSPROJECT/chroma/gtfsdata/routes.txt')
stops = read.csv('/Users/sophia/Downloads/DSPROJECT/chroma/gtfsdata/stops.txt')
stop_times = read.csv('/Users/sophia/Downloads/DSPROJECT/chroma/gtfsdata/stop_times.txt')
shapes = read.csv('/Users/sophia/Downloads/DSPROJECT/chroma/gtfsdata/shapes.txt')
routes = dbWriteTable(db, 'routes', routes, overwrite= TRUE)
stops = dbWriteTable(db, 'stops', stops, overwrite= TRUE)
stop_times = dbWriteTable(db, 'stop_times', stop_times, overwrite= TRUE)
shapes = dbWriteTable(db, 'shapes', shapes, overwrite= TRUE)
dbGetQuery(db, 'select * from routes limit 10')
dbGetQuery(db, 'select * from stop_times group by stop_id')
dbGetQuery(db, 'select stop_id from stop_times')
dbGetQuery(db, 'select * from stop_times group by')
dbGetQuery(db, 'select * from stop_times group by stop_id')
dbGetQuery(db, 'select stop_id >1000from stop_times')
group by stop_id
dbGetQuery(db, 'select count departure_time from stop_times group by stop_id')
dbGetQuery(db, 'select count(*) departure_time from stop_times group by stop_id')
dbGetQuery(db, 'select count(*) departure_time as deps from stop_times group by stop_id as stops')
dbGetQuery(db, 'select count(*) as deps departure_time from stop_times group by stop_id as stops')
dbGetQuery(db, 'select count(*) departure_time as "deps" from stop_times group by stop_id as "stops"')
dbGetQuery(db, 'select count(*) departure_time  "deps" from stop_times as deps group by stop_id')
dbGetQuery(db, 'select count(*) departure_time  "deps" from stop_times as "deps" group by stop_id')
dbGetQuery(db, 'select count(*) departure_time  "deps" from stop_times as deps group by stop_id')
dbGetQuery(db, 'select stop_id as stop from stop_times')
dbGetQuery(db, 'select stop_id as stop from stop_times limit 10')
dbGetQuery(db, 'select count(*) departure_time from stop_times as deps group by stop_id')
dbGetQuery(db, 'select count(*) departure_time from stop_times as deps group by stop_id limit 10')
dbGetQuery(db, 'select count(*) departure_time, stop_id from stop_times as deps group by stop_id limit 10')
dbGetQuery(db, 'select stop_id as stop, count(*) departure_time as num_deps from stop_times group by stop_id limit 10')
dbGetQuery(db, 'select count(*) departure_time as num_deps, stop_id as stop from stop_times as deps group by stop_id limit 10')
dbGetQuery(db, 'select count(*) departure_time as num_deps, stop_id from stop_times as deps group by stop_id limit 10')
dbGetQuery(db, 'select count(*) departure_time, stop_id from stop_times as deps group by stop_id limit 10')
dbGetQuery(db, 'select count(*) departure_time as dep, stop_id from stop_times as deps group by stop_id limit 10')
dbGetQuery(db, 'select count(*) departure_time as dep", stop_id from stop_times as deps group by stop_id limit 10')
dbGetQuery(db, 'select count(*) departure_time as "dep", stop_id from stop_times as deps group by stop_id limit 10')
dbGetQuery(db, 'select count(*) departure_time, stop_id as stop from stop_times as deps group by stop_id limit 10')
dbGetQuery(db, 'select count(*) departure_time, stop_id as stop from stop_times as deps group by stop_id')
dbWriteTable(db, dbGetQuery(db, 'select stop_id as stop from stop_times') )
dbWriteTable(db, dbGetQuery(db, 'select stop_id as stop from stop_times') )
dbGetQuery(db, 'select count(*) departure_time, stop_id as stop from stop_times group by stop_id')
dbWriteTable(db, dbGetQuery(db, 'select stop_id as stop from stop_times') )
sdsheet = read.csv('/Users/sophia/Downloads/DSPROJECT/SDPublicTransportProject/data/updatedstops.csv')
sdsheet = dbWriteTable(db, 'sdsheet', sdsheet, overwrite=TRUE)
dbGetQuery(db, 'select count(*) departure_time, stop_id as stop from stop_times group by stop_id')
dbGetQuery(db, 'select count(*) departure_time, stop_id as stop from stop_times')
dbGetQuery(db, 'select count(*) departure_time, stop_id as stop from stop_times
inner join stop_id on stop_times.stop_id = sdsheet.stop_id
group by stop_id')
dbGetQuery(db, 'select count(*) departure_time, stop_id as stop from stop_times
inner join stop on stop_times.stop_id = sdsheet.stop_id
group by stop_id')
dbGetQuery(db, 'select count(*) departure_time, stop_id as stop from stop_times
inner join stop_times.stop_id on stop_times.stop_id = sdsheet.stop_id
group by stop_id')
dbGetQuery(db, 'select count(*) departure_time, stop_id as stop from stop_times group by stop_id')
dbGetQuery(db, 'select count(*) departure_time, stop_id from stop_times
inner join stop_id on stop_times.stop_id = sdsheet.stop_id
group by stop_id')
dbGetQuery(db, 'select count(*) departure_time, stop_id from stop_times s
inner join sdsheet s on stop_times.stop_id = sdsheet.stop_id
group by stop_id')
dbGetQuery(db, 'select count(*) departure_time, stop_id from stop_times s
inner join sdsheet sd on s.stop_id = sd.stop_id
group by stop_id')
sdsheet = dbWriteTable(db, 'sdsheet', sdsheet, overwrite=TRUE)
sdsheet = dbWriteTable(db, 'sdsheet', sdsheet, overwrite=TRUE)
stop_times = dbWriteTable(db, 'stop_times', stop_times, overwrite= TRUE)
shapes = dbWriteTable(db, 'shapes', shapes, overwrite= TRUE)
sdsheet = dbWriteTable(db, 'sdsheet', sdsheet, overwrite=TRUE)
library(DBI)
library(sqldf)
library(RSQLite)
setwd('/Users/sophia/Downloads/DSPROJECT/SDPublicTransportProject/data')
drv = dbDriver('SQLite')
db = dbConnect(drv, dbname = 'gtfsdatabase.sqlite')
routes = read.csv('/Users/sophia/Downloads/DSPROJECT/chroma/gtfsdata/routes.txt')
stops = read.csv('/Users/sophia/Downloads/DSPROJECT/chroma/gtfsdata/stops.txt')
stop_times = read.csv('/Users/sophia/Downloads/DSPROJECT/chroma/gtfsdata/stop_times.txt')
shapes = read.csv('/Users/sophia/Downloads/DSPROJECT/chroma/gtfsdata/shapes.txt')
sdsheet = read.csv('/Users/sophia/Downloads/DSPROJECT/SDPublicTransportProject/data/updatedstops.csv')
routes = dbWriteTable(db, 'routes', routes, overwrite= TRUE)
stops = dbWriteTable(db, 'stops', stops, overwrite= TRUE)
stop_times = dbWriteTable(db, 'stop_times', stop_times, overwrite= TRUE)
shapes = dbWriteTable(db, 'shapes', shapes, overwrite= TRUE)
sdsheet = dbWriteTable(db, 'sdsheet', sdsheet, overwrite=TRUE)
dbGetQuery(db, 'select stop_id >1000from stop_times')
dbGetQuery(db, 'select stop_id as stop from stop_times limit 10')
dbGetQuery(db, 'select count(*) departure_time, stop_id as stop from stop_times group by stop_id')
dbGetQuery(db, 'select count(*) departure_time, stop_id from stop_times s
inner join sdsheet sd on s.stop_id = sd.stop_id
group by stop_id')
sdsheet = read.csv('/Users/sophia/Downloads/DSPROJECT/SDPublicTransportProject/data/updatedstops.csv')
sdsheet = dbWriteTable(db, 'sdsheet', sdsheet, overwrite=TRUE)
dbGetQuery(db, 'select count(*) departure_time, stop_id from stop_times s
inner join sdsheet sd on s.stop_id = sd.stop_id
group by stop_id')
dbGetQuery(db, 'select count(*) departure_time, s.stop_id from stop_times s
inner join sdsheet sd on s.stop_id = sd.stop_id
group by stop_id')
dbGetQuery(db, 'select count(*) s.departure_time, s.stop_id from stop_times s
inner join sdsheet sd on s.stop_id = sd.stop_id
group by stop_id')
dbGetQuery(db, 'select count(*) departure_time, stop_times.stop_id from stop_times s
inner join sdsheet sd on s.stop_id = sd.stop_id
group by stop_id')
dbWriteTable(db, dbGetQuery(db, 'select stop_id as stop from stop_times limit 10'))
dbGetQuery(db, 'select stop_id as stop from stop_times limit 10')
dbGetQuery(db, 'select count(*) departure_time, stop_id as stop from stop_times group by stop_id')
dbGetQuery(db, 'select count(*) departure_time, stop_id as stop from stop_times group by stop_id')
dbGetQuery(db, 'select count(*) departure_time, stop_times.stop_id from stop_times s
inner join sdsheet sd on s.stop_id = sd.stop_id
group by stop_id')
dbGetQuery(db, 'select stop_times.stop_id inner join stops on stop_times.stop_id = stops.stop_id')
dbGetQuery(db, 'select stop_times.stop_id from stop_tims inner join stops on stop_times.stop_id = stops.stop_id')
dbGetQuery(db, 'select stop_times.stop_id from stop_times inner join stops on stop_times.stop_id = stops.stop_id')
dbGetQuery(db, 'select count(*) departure_time, stop_times.stop_id from stop_times s
inner join sdsheet sd on s.stop_id = sd.stop_id
group by stop_id')
dbGetQuery(db, 'select count(*) departure_time, stop_id from stop_times s
inner join sdsheet sd on s.stop_id = sd.stop_id
group by stop_id')
dbGetQuery(db, 'select count(*) departure_time, sd.stop_id from stop_times s
inner join sdsheet sd on s.stop_id = sd.stop_id
group by stop_id')
dbGetQuery(db, 'select count(*) departure_time, sd.stop_id from stop_times s
inner join sdsheet sd on s.stop_id = sd.stop_id
group by stop_id')
dbGetQuery(db, 'select count(*) departure_time, sd.stop_id from stop_times s
inner join sdsheet sd on s.stop_id = sd.stop_id
group by sd.stop_id')
dbGetQuery(db, 'select count(*) sd.stop_id, departure_time from stop_times s
inner join sdsheet sd on s.stop_id = sd.stop_id
group by sd.stop_id')
dbGetQuery(db, 'select count(*) sd.stop_id, departure_time from stop_times s
inner join sdsheet sd on s.stop_id = sd.stop_id
group by sd.stop_id')
dbGetQuery(db, 'select count(*) stop_id, departure_time from stop_times s
inner join sdsheet sd on s.stop_id = sd.stop_id
group by sd.stop_id')
dbGetQuery(db, 'select stop_id, count(*) departure_time from stop_times s
inner join sdsheet sd on s.stop_id = sd.stop_id
group by sd.stop_id')
dbGetQuery(db, 'select sdstop_id, count(*) departure_time from stop_times s
inner join sdsheet sd on s.stop_id = sd.stop_id
group by sd.stop_id')
dbGetQuery(db, 'select sd.stop_id, count(*) departure_time from stop_times s
inner join sdsheet sd on s.stop_id = sd.stop_id
group by sd.stop_id')
dbGetQuery(db, 'select sd.stop_id, count(*) departure_time from sdsheet sd
inner join stop_times s on s.stop_id = sd.stop_id
group by sd.stop_id') #THIS IS THE ONE
dbGetQuery(db, 'select sd.stop_id, count(*) departure_time from sdsheet sd
inner join stop_times s on s.stop_id = sd.stop_id where stop_times.stop_id = 12081
group by sd.stop_id') #THIS IS THE ONE
dbGetQuery(db,'select stop_id, count(*) departure_time from stop_times where
stop_id = 12081')
dbGetQuery(db,'select stop_id, count(*) departure_time from stop_times where
stop_id = 12065')
dbGetQuery(db,'select stop_id, count(*) departure_time from stop_times where
stop_id = 13522')
dbGetQuery(db,'select stop_id, count(*) departure_time from stop_times where
stop_id = 12800')
dbGetQuery(db,'select stop_id, count(*) departure_time from stop_times where
stop_id = 12078')
dbGetQuery(db,'select stop_id, count(*) departure_time from stop_times where
stop_id = 12089')
dbGetQuery(db,'select stop_id, count(*) departure_time from stop_times where
stop_id = 12086')
